@page "/verify"
@page "/verify/{OtpCode}"
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

@if (string.IsNullOrEmpty(OtpCode) && !isLoading)
{
    <div class="auth-form mt-5 alert alert-info">
        <h4 class="mb-4 text-center">Email verification:</h4>
        <p>Your account is protected with Two-Factor Authentication.</p>
        <p>To sign in, you will need to enter a 6-digit code send to your Email.</p>
        <div class="flex-column justify-content-start align-items-start">
            <div class="mt-3">
                <input @bind="OtpCode" class="form-control" placeholder="Enter the 6-digit code" />
            </div>
            <div class="mt-4">
                <button @onclick="ConfirmTOTP" class="btn btn-primary">Confirm Authentication Code</button>
            </div>
        </div>
    </div>
}
else
{
    if (!isLoading)
    {
        ConfirmTOTP();
    }
}
@if (hasFeedback)
{
    <div class="alert-box @alertType">
        @alertMessage
    </div>
}

@code {
    private string totpCode = "";
    private string currentUser = "";
    private bool IsAuthEnabled;
    private HttpClient _http;
    private string alertType = "";
    private string alertMessage = "";
    private bool hasFeedback;
    private bool isLoading;

    [Parameter]
    public string OtpCode { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _http = new HttpClient()
            {
                BaseAddress = new Uri(Navigation.BaseUri)
            };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            currentUser = await GetUserNameAsync();
        }
        StateHasChanged();
    }

    private async Task ConfirmTOTP()
    {
        if (isLoading)
        {
            return;
        }
        isLoading = true;
        var response = await _http.PostAsJsonAsync("api/totp/confirm", new { Username = currentUser, Code = OtpCode });
        if (response.IsSuccessStatusCode)
        {
            Navigation.NavigateTo("/");
        }
        else
        {
            hasFeedback = true;
            alertType = "alert-warning";
            alertMessage = "Unsuccessful authentication. Please try again.";
        }
    }

    private async Task<string> GetUserNameAsync()
    {
        return await JSRuntime.InvokeAsync<string>("localStorage.getItem", "username");
    }
}
